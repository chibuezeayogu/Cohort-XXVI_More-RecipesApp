// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Main /> should render Main Component 1`] = `
ShallowWrapper {
  "length": 1,
  "node": <div
    className="body"
  >
    <withRouter(Menu) />
    <Home />
    <Footer />
  </div>,
  "nodes": Array [
    <div
      className="body"
    >
      <withRouter(Menu) />
      <Home />
      <Footer />
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Main
        history={
          Object {
            "push": [MockFunction] {
              "calls": Array [
                Array [
                  "/recipes",
                ],
              ],
            },
          }
        }
        userData={
          Object {
            "currentUser": Object {
              "email": "chibuezeayogu@hotmail.com",
              "id": 1,
            },
            "isAuthenticated": true,
          }
        }
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Main {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "history": Object {
            "push": [MockFunction] {
              "calls": Array [
                Array [
                  "/recipes",
                ],
              ],
            },
          },
          "userData": Object {
            "currentUser": Object {
              "email": "chibuezeayogu@hotmail.com",
              "id": 1,
            },
            "isAuthenticated": true,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="body"
        >
          <withRouter(Menu) />
          <Home />
          <Footer />
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="body"
        >
          <withRouter(Menu) />
          <Home />
          <Footer />
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Main
    history={
      Object {
        "push": [MockFunction] {
          "calls": Array [
            Array [
              "/recipes",
            ],
          ],
        },
      }
    }
    userData={
      Object {
        "currentUser": Object {
          "email": "chibuezeayogu@hotmail.com",
          "id": 1,
        },
        "isAuthenticated": true,
      }
    }
  />,
}
`;

exports[`<Main /> should render the Main Component 1`] = `
ShallowWrapper {
  "length": 1,
  "node": <div
    className="body"
  >
    <withRouter(Menu) />
    <Home />
    <Footer />
  </div>,
  "nodes": Array [
    <div
      className="body"
    >
      <withRouter(Menu) />
      <Home />
      <Footer />
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Main
        history={
          Object {
            "push": [MockFunction] {
              "calls": Array [
                Array [
                  "/recipes",
                ],
              ],
            },
          }
        }
        userData={
          Object {
            "currentUser": Object {
              "email": "chibuezeayogu@hotmail.com",
              "id": 1,
            },
            "isAuthenticated": true,
          }
        }
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Main {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "history": Object {
            "push": [MockFunction] {
              "calls": Array [
                Array [
                  "/recipes",
                ],
              ],
            },
          },
          "userData": Object {
            "currentUser": Object {
              "email": "chibuezeayogu@hotmail.com",
              "id": 1,
            },
            "isAuthenticated": true,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="body"
        >
          <withRouter(Menu) />
          <Home />
          <Footer />
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="body"
        >
          <withRouter(Menu) />
          <Home />
          <Footer />
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Main
    history={
      Object {
        "push": [MockFunction] {
          "calls": Array [
            Array [
              "/recipes",
            ],
          ],
        },
      }
    }
    userData={
      Object {
        "currentUser": Object {
          "email": "chibuezeayogu@hotmail.com",
          "id": 1,
        },
        "isAuthenticated": true,
      }
    }
  />,
}
`;
